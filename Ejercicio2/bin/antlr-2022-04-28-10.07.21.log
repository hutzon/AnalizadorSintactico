2022-04-28 10:07:20:868 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Ejemplo2 (RULES (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT (.. 'a' 'z')) (ALT (.. 'A' 'Z')))) (RULE DIGITO (RULEMODIFIERS fragment) (BLOCK (ALT (.. '0' '9')))) (RULE NUM_REAL (BLOCK (ALT (BLOCK (ALT (+ (BLOCK (ALT DIGITO))) '.')) (* (BLOCK (ALT DIGITO)))))) (RULE NUM_ENTERO (BLOCK (ALT (BLOCK (ALT (+ (BLOCK (ALT DIGITO)))))))) (RULE IDENT (BLOCK (ALT (BLOCK (ALT LETRA) (ALT '_')) (* (BLOCK (ALT LETRA) (ALT DIGITO) (ALT '_')))))) (RULE OPERADOR (BLOCK (ALT '==') (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) (RULE BLANCO (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT ' ') (ALT '\r') (ALT '\n') (ALT '\t')))) skip))) (RULE inicio (BLOCK (ALT 'while' '(' expresion ')' '{' instrucciones '}'))) (RULE instrucciones (BLOCK (ALT (* (BLOCK (ALT instruccion)))))) (RULE instruccion (BLOCK (ALT inst_asig) (ALT inst_if))) (RULE inst_asig (BLOCK (ALT IDENT '=' expresion ';'))) (RULE inst_if (BLOCK (ALT 'if' '(' expresion ')' '{' instrucciones '}'))) (RULE expresion (BLOCK (ALT operacion (* (BLOCK (ALT OPERADOR operacion)))))) (RULE operacion (BLOCK (ALT sumando (* (BLOCK (ALT (BLOCK (ALT '+') (ALT '-')) sumando)))))) (RULE sumando (BLOCK (ALT operador (* (BLOCK (ALT (BLOCK (ALT '*') (ALT '/')) operador)))))) (RULE operador (BLOCK (ALT IDENT) (ALT NUM_ENTERO) (ALT NUM_REAL) (ALT '(' expresion ')')))))
2022-04-28 10:07:20:901 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Ejemplo2 (RULES (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT (SET (.. 'a' 'z') (.. 'A' 'Z'))))) (RULE DIGITO (RULEMODIFIERS fragment) (BLOCK (ALT (.. '0' '9')))) (RULE NUM_REAL (BLOCK (ALT (BLOCK (ALT (+ (BLOCK (ALT DIGITO))) '.')) (* (BLOCK (ALT DIGITO)))))) (RULE NUM_ENTERO (BLOCK (ALT (BLOCK (ALT (+ (BLOCK (ALT DIGITO)))))))) (RULE IDENT (BLOCK (ALT (BLOCK (ALT LETRA) (ALT '_')) (* (BLOCK (ALT LETRA) (ALT DIGITO) (ALT '_')))))) (RULE OPERADOR (BLOCK (ALT '==') (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) (RULE BLANCO (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\r' '\n' '\t'))))) skip))) (RULE inicio (BLOCK (ALT 'while' '(' expresion ')' '{' instrucciones '}'))) (RULE instrucciones (BLOCK (ALT (* (BLOCK (ALT instruccion)))))) (RULE instruccion (BLOCK (ALT inst_asig) (ALT inst_if))) (RULE inst_asig (BLOCK (ALT IDENT '=' expresion ';'))) (RULE inst_if (BLOCK (ALT 'if' '(' expresion ')' '{' instrucciones '}'))) (RULE expresion (BLOCK (ALT operacion (* (BLOCK (ALT OPERADOR operacion)))))) (RULE operacion (BLOCK (ALT sumando (* (BLOCK (ALT (SET '+' '-') sumando)))))) (RULE sumando (BLOCK (ALT operador (* (BLOCK (ALT (SET '*' '/') operador)))))) (RULE operador (BLOCK (ALT IDENT) (ALT NUM_ENTERO) (ALT NUM_REAL) (ALT '(' expresion ')')))))
2022-04-28 10:07:20:932 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Ejemplo2 (RULES (RULE inicio (BLOCK (ALT 'while' '(' expresion ')' '{' instrucciones '}'))) (RULE instrucciones (BLOCK (ALT (* (BLOCK (ALT instruccion)))))) (RULE instruccion (BLOCK (ALT inst_asig) (ALT inst_if))) (RULE inst_asig (BLOCK (ALT IDENT '=' expresion ';'))) (RULE inst_if (BLOCK (ALT 'if' '(' expresion ')' '{' instrucciones '}'))) (RULE expresion (BLOCK (ALT operacion (* (BLOCK (ALT OPERADOR operacion)))))) (RULE operacion (BLOCK (ALT sumando (* (BLOCK (ALT (SET '+' '-') sumando)))))) (RULE sumando (BLOCK (ALT operador (* (BLOCK (ALT (SET '*' '/') operador)))))) (RULE operador (BLOCK (ALT IDENT) (ALT NUM_ENTERO) (ALT NUM_REAL) (ALT '(' expresion ')')))))
2022-04-28 10:07:20:932 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR Ejemplo2Lexer (RULES (RULE T__0 (BLOCK (ALT 'while'))) (RULE T__1 (BLOCK (ALT '('))) (RULE T__2 (BLOCK (ALT ')'))) (RULE T__3 (BLOCK (ALT '{'))) (RULE T__4 (BLOCK (ALT '}'))) (RULE T__5 (BLOCK (ALT '='))) (RULE T__6 (BLOCK (ALT ';'))) (RULE T__7 (BLOCK (ALT 'if'))) (RULE T__8 (BLOCK (ALT '+'))) (RULE T__9 (BLOCK (ALT '-'))) (RULE T__10 (BLOCK (ALT '*'))) (RULE T__11 (BLOCK (ALT '/'))) (RULE LETRA (RULEMODIFIERS fragment) (BLOCK (ALT (SET (.. 'a' 'z') (.. 'A' 'Z'))))) (RULE DIGITO (RULEMODIFIERS fragment) (BLOCK (ALT (.. '0' '9')))) (RULE NUM_REAL (BLOCK (ALT (BLOCK (ALT (+ (BLOCK (ALT DIGITO))) '.')) (* (BLOCK (ALT DIGITO)))))) (RULE NUM_ENTERO (BLOCK (ALT (BLOCK (ALT (+ (BLOCK (ALT DIGITO)))))))) (RULE IDENT (BLOCK (ALT (BLOCK (ALT LETRA) (ALT '_')) (* (BLOCK (ALT LETRA) (ALT DIGITO) (ALT '_')))))) (RULE OPERADOR (BLOCK (ALT '==') (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) (RULE BLANCO (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\r' '\n' '\t'))))) skip)))))
2022-04-28 10:07:21:355 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, NUM_REAL=13, NUM_ENTERO=14, IDENT=15, OPERADOR=16, BLANCO=17}
2022-04-28 10:07:21:355 semantics LogManager.java:25 strings={'while'=1, '('=2, ')'=3, '{'=4, '}'=5, '='=6, ';'=7, 'if'=8, '+'=9, '-'=10, '*'=11, '/'=12}
2022-04-28 10:07:21:362 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2022-04-28 10:07:21:363 LL1 LogManager.java:25 look=[{8, 15}, 5]
2022-04-28 10:07:21:363 LL1 LogManager.java:25 LL(1)? true
2022-04-28 10:07:21:363 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2022-04-28 10:07:21:363 LL1 LogManager.java:25 look=[15, 8]
2022-04-28 10:07:21:363 LL1 LogManager.java:25 LL(1)? true
2022-04-28 10:07:21:363 LL1 LogManager.java:25 
DECISION 2 in rule expresion
2022-04-28 10:07:21:363 LL1 LogManager.java:25 look=[16, {3, 7}]
2022-04-28 10:07:21:363 LL1 LogManager.java:25 LL(1)? true
2022-04-28 10:07:21:363 LL1 LogManager.java:25 
DECISION 3 in rule operacion
2022-04-28 10:07:21:363 LL1 LogManager.java:25 look=[{9..10}, {3, 7, 16}]
2022-04-28 10:07:21:364 LL1 LogManager.java:25 LL(1)? true
2022-04-28 10:07:21:364 LL1 LogManager.java:25 
DECISION 4 in rule sumando
2022-04-28 10:07:21:364 LL1 LogManager.java:25 look=[{11..12}, {3, 7, 9..10, 16}]
2022-04-28 10:07:21:364 LL1 LogManager.java:25 LL(1)? true
2022-04-28 10:07:21:364 LL1 LogManager.java:25 
DECISION 5 in rule operador
2022-04-28 10:07:21:365 LL1 LogManager.java:25 look=[15, 14, 13, 2]
2022-04-28 10:07:21:365 LL1 LogManager.java:25 LL(1)? true
